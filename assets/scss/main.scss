@charset "UTF-8";
@use "./imports/flex-grid-lite"; 
@use "./imports/variables" as *;

@font-face {
  font-family: 'Roboto';
  src: url('../webfonts/roboto/644eccdda8bcd3fa9df78f906564ea3b.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Roboto';
  src: url('../webfonts/roboto/49a811444bab3cf0a57dfc5cfe0fa774.woff2') format('woff2');
  font-weight: 500;
  font-style: normal;
}
@font-face {
  font-family: 'Roboto';
  src: url('../webfonts/roboto/cfdfe7794808144f8e18c25235f53ae2.woff2') format('woff2');
  font-weight: bold;
  font-style: normal;
}

html {
    font-size: $typo-size-default;
    line-height: $typo-lineHeight-default;
}


body {
    font-family: 'Roboto', sans-serif;
    font-size: $typo-size-default;
    color: $color-typo-primary;
    height: 100%;
}

.typo-body1 {
  @include typo-body1;
  &.secondary {
    color: $color-typo-secondary;
  }
  &.accent {
    font-weight: $typo-weight-medium;
  }
  &.narrow{
    line-height: $typo-lineHeight-s;
  }
}

.typo-body2 {
  @include typo-body2;
  &.secondary {
    color: $color-typo-secondary;
  }
}

.surface-secondary {
    background-color: $color-surface-secondary;
}

.surface-tertiary {
    background-color: $color-surface-tertiary;
}

ul{
    border: none;
    margin: 0;
    padding-left: 0;
}
ul li {
    margin-bottom: 0;
    line-height: 1.2;
    // remove bullet
    list-style-type: none;
}

.nowrap {
    white-space: nowrap;
}

.oneliner{
    min-width: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 100%;
    display: block;
}
.oneliner-box{
    container-type: inline-size;
}

$boxUnit: 10px;
@for $i from 3 through 48 {
    @container (max-width: calc($i * $boxUnit)) {
        .oneliner{
            width:  calc(($i - 1) * $boxUnit);
        }
    }
  }

.pointer{
    cursor: pointer;
}

.debugBorder, .debugborder{
    border: 1px solid $color-danger;
}
.debugBorder, .debugborder{
    & .debugBorder, & .debugborder{
        border: 1px solid $color-blue-500;
    }
}

/**********************************
/*Hilfsklassen PADDING und MARGIN*/

/* PADDING */


@each $size in $sizes {
    .p#{$size} {
        padding: $size*$spacing-s !important;
    }
    @each $key, $direction in $directions {
         .p#{$key}#{$size} {
            padding-#{$direction}: $size*$spacing-s !important;
          }
    }

    .ph#{$size} {
        padding-left: $size*$spacing-s !important;
        padding-right: $size*$spacing-s !important;
    }
    .pv#{$size} {
        padding-top: $size*$spacing-s !important;
        padding-bottom: $size*$spacing-s !important;
    }
}

/* MARGIN */
@each $size in $sizes {
    .m#{$size} {
        margin: $size*$spacing-s !important;
    }
    @each $key, $direction in $directions {
         .m#{$key}#{$size} {
            margin-#{$direction}: $size*$spacing-s !important;
          }
    }
    .mh#{$size} {
        margin-left: $size*$spacing-s !important;
        margin-right: $size*$spacing-s !important;
    }
    .mv#{$size} {
        margin-top: $size*$spacing-s !important;
        margin-bottom: $size*$spacing-s !important;
    }
 
}


.mrHalf{
    margin-right: $spacing-xs;
} 

.mlHalf{
    margin-left: $spacing-xs;
} 

.mhHalf{
    margin-right: $spacing-xs;
    margin-left: $spacing-xs;
} 

.mtHalf{
    margin-top: $spacing-xs;
} 

.mbHalf{
    margin-bottom: $spacing-xs;
} 
.mvHalf{
    margin-top: $spacing-xs;
    margin-bottom: $spacing-xs;
} 


.prHalf{
    padding-right: $spacing-xs;
} 

.plHalf{
    padding-left: $spacing-xs;
} 

.phHalf{
    padding-right: $spacing-xs;
    padding-left: $spacing-xs;
} 

.ptHalf{
    padding-top: $spacing-xs;
} 

.pbHalf{
    padding-bottom: $spacing-xs;
} 
.pvHalf{
    padding-top: $spacing-xs;
    padding-bottom: $spacing-xs;
} 


/**********************************
/*Hilfsklassen Grids*/

.grid{
    display: grid;
}

.grid-1{
    display: grid;
    grid-template-columns: 1fr;
}

.grid-2, .grid-xs-2{
    display: grid;
    grid-template-columns: 1fr 1fr;
}

.grid-3, .grid-xs-3{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
}

.grid-4, .grid-xs-4{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
}

.grid-5, .grid-xs-5{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
}

.grid-6, .grid-xs-6{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
}

.grid-7, .grid-xs-7{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
}

.grid-8, .grid-xs-8{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
}

@each $size in $sizes {
    @if $size > 0 {
        .grid-n#{$size}, .grid-xs-n#{$size} {
            display: grid;
            grid-template-columns: 1fr $size*$spacing-s;
        }
        @each $front in $sizes {
            @if $front > 0 {
                .grid-#{$front}n#{$size} {
                    display: grid;
                    grid-template-columns: $front*$spacing-s 1fr $size*$spacing-s;
                }
            }
        }
        .grid-#{$size}n, .grid-xs-#{$size}n {
            display: grid;
            grid-template-columns: $size*$spacing-s 1fr;
        }

        @each $back in $sizes {
            @if $back > 0 {
                .grid-#{$size}n#{$back} {
                    display: grid;
                    grid-template-columns: $size*$spacing-s 1fr $back*$spacing-s;
                }
            }
        }

        .grid-n#{$size*20}, .grid-xs-n#{$size*20}  {
            display: grid;
            grid-template-columns: 1fr $size*20px;
        }
        @each $front in $sizes {
            @if $front > 0 {
                .grid-#{$front*20}n#{$size*20} {
                    display: grid;
                    grid-template-columns: $front*20px 1fr $size*20px;
                }
            }
        }
        @each $back in $sizes {
            @if $back > 0 {
                .grid-#{$size*20}n#{$back*20} {
                    display: grid;
                    grid-template-columns: $size*20px 1fr $back*20px;
                }
            }
        }
        
        .grid-#{$size*20}n, .grid-xs-#{$size*20}n {
            display: grid;
            grid-template-columns: $size*20px 1fr;
        }


    }
}



.grid-2575, .grid-xs-2575{
    display: grid;
    grid-template-columns: 1fr 3fr;   
}

.grid-7525, .grid-xs-7525{
    display: grid;
    grid-template-columns: 3fr 1fr;
}

.grid-3366, .grid-xs-3366{
    display: grid;
    grid-template-columns: 1fr 2fr;
}

.grid-6633, .grid-xs-6633{
    display: grid;
    grid-template-columns: 2fr 1fr;
}

@media screen and (max-width : 414px) and (orientation:portrait){
    @each $size in $sizes {
        @if $size > 0 {
            .grid-n#{$size}, .grid-#{$size}n {
                grid-template-columns: 1fr;
            }
            .grid-n#{$size*20}, .grid-#{$size*20}n {
                grid-template-columns: 1fr;
            }
        }
    }
    .grid-2575, .grid-3366, .grid-7525, .grid-6633  {
        grid-template-columns: 1fr;
    }
}


/* Grid Gaps */
@each $size in $sizes {
    .gg#{$size}{
        grid-gap: $size*$spacing-s;
    }
    .cg#{$size}{
        column-gap: $size*$spacing-s;
    }
    .rg#{$size}{
        row-gap: $size*$spacing-s;
    }
}

.grid-autoN{
    display: grid;
    grid-template-columns: auto 1fr;
}

.grid-autoNauto{
    display: grid;
    grid-template-columns: auto 1fr auto;
}

.grid-autoN20{
    display: grid;
    grid-template-columns: auto 1fr 20px;
}

.grid-autoN40{
    display: grid;
    grid-template-columns: auto 1fr 40px;
}

.grid-maxContent{
    display: grid;
    grid-template-columns: repeat(auto-fit,  minmax(240px, 1fr));
}

/* Max und Min Gr√∂ssen*/
@each $size in $sizes {
    .maxw-#{$size*20} {
        max-width: $size*20px;
    }
    .minw-#{$size*20} {
        min-width: $size*20px;
    }
}


@each $size in $sizes {
    .fixed-size-#{$size}, .fix#{$size} {
        width: $size*$spacing-s;
    }
}

@each $size in $largewidths {
    .fixed-size-#{$size}, .fix#{$size} {
        width: $size*1px;
    }
}

.fitContent {
    width: fit-content;
}

.flexbox {
    justify-content: flex-start;
}

.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
    a{
        text-transform: uppercase;
        display: inline-block;
        margin-top: 8px;
    }
    i{
        color: $color-info;
    }
}

a.nodecoration {
    color: inherit;
}
